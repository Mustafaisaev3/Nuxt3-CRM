/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/users/login": {
    /**
     * Existing user login
     * @description Login for existing user
     */
    post: operations["Login"];
  };
  "/users": {
    /** @description Register a new user */
    post: operations["CreateUser"];
  };
  "/user": {
    /**
     * Get current user
     * @description Gets the currently logged-in user
     */
    get: operations["GetCurrentUser"];
    /**
     * Update current user
     * @description Updated user information for current user
     */
    put: operations["UpdateCurrentUser"];
  };
  "/profiles/{username}": {
    /**
     * Get a profile
     * @description Get a profile of a user of the system. Auth is optional
     */
    get: operations["GetProfileByUsername"];
  };
  "/profiles/{username}/follow": {
    /**
     * Follow a user
     * @description Follow a user by username
     */
    post: operations["FollowUserByUsername"];
    /**
     * Unfollow a user
     * @description Unfollow a user by username
     */
    delete: operations["UnfollowUserByUsername"];
  };
  "/articles/feed": {
    /**
     * Get recent articles from users you follow
     * @description Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     */
    get: operations["GetArticlesFeed"];
  };
  "/articles": {
    /**
     * Get recent articles globally
     * @description Get most recent articles globally. Use query parameters to filter results. Auth is optional
     */
    get: operations["GetArticles"];
    /**
     * Create an article
     * @description Create an article. Auth is required
     */
    post: operations["CreateArticle"];
  };
  "/articles/{slug}": {
    /**
     * Get an article
     * @description Get an article. Auth not required
     */
    get: operations["GetArticle"];
    /**
     * Update an article
     * @description Update an article. Auth is required
     */
    put: operations["UpdateArticle"];
    /**
     * Delete an article
     * @description Delete an article. Auth is required
     */
    delete: operations["DeleteArticle"];
  };
  "/articles/{slug}/comments": {
    /**
     * Get comments for an article
     * @description Get the comments for an article. Auth is optional
     */
    get: operations["GetArticleComments"];
    /**
     * Create a comment for an article
     * @description Create a comment for an article. Auth is required
     */
    post: operations["CreateArticleComment"];
  };
  "/articles/{slug}/comments/{id}": {
    /**
     * Delete a comment for an article
     * @description Delete a comment for an article. Auth is required
     */
    delete: operations["DeleteArticleComment"];
  };
  "/articles/{slug}/favorite": {
    /**
     * Favorite an article
     * @description Favorite an article. Auth is required
     */
    post: operations["CreateArticleFavorite"];
    /**
     * Unfavorite an article
     * @description Unfavorite an article. Auth is required
     */
    delete: operations["DeleteArticleFavorite"];
  };
  "/tags": {
    /**
     * Get tags
     * @description Get tags. Auth not required
     */
    get: operations["GetTags"];
  };
  "/todos/feed": {
    /**
     * Get recent todos from users you follow
     * @description Get most recent todos from users you follow. Use query parameters to limit. Auth is required
     */
    get: operations["GetTodosFeed"];
  };
  "/todos": {
    /**
     * Get recent todos globally
     * @description Get most recent todos globally. Use query parameters to filter results. Auth is optional
     */
    get: operations["GetTodos"];
    /**
     * Create an todo
     * @description Create an todo. Auth is required
     */
    post: operations["CreateTodo"];
  };
  "/todos/{slug}": {
    /**
     * Get an todo
     * @description Get an todo. Auth not required
     */
    get: operations["GetTodo"];
    /**
     * Update an todo
     * @description Update an todo. Auth is required
     */
    put: operations["UpdateTodo"];
    /**
     * Delete an todo
     * @description Delete an todo. Auth is required
     */
    delete: operations["DeleteTodo"];
  };
  "/todos/{slug}/comments": {
    /**
     * Get comments for an todo
     * @description Get the comments for an todo. Auth is optional
     */
    get: operations["GetTodoComments"];
    /**
     * Create a comment for an todo
     * @description Create a comment for an todo. Auth is required
     */
    post: operations["CreateTodoComment"];
  };
  "/todos/{slug}/comments/{id}": {
    /**
     * Delete a comment for an todo
     * @description Delete a comment for an todo. Auth is required
     */
    delete: operations["DeleteTodoComment"];
  };
  "/todos/{slug}/favorite": {
    /**
     * Favorite an todo
     * @description Favorite an todo. Auth is required
     */
    post: operations["CreateTodoFavorite"];
    /**
     * Unfavorite an todo
     * @description Unfavorite an todo. Auth is required
     */
    delete: operations["DeleteTodoFavorite"];
  };
  "/consumable": {
    /** Get all consumables */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new consumable */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description ID of the consumable type */
            consumableType: number;
            /** @description Name of the consumable */
            consumableName: string;
            /** @description Description of the consumable */
            consumableDescription?: string;
            /**
             * Format: binary
             * @description Photo of the consumable
             */
            consumablePhoto?: string;
            /** @description Quantity of the consumable */
            consumableQuantity?: string;
            /** @description Quantity unit of the consumable */
            consumableQuantityUnit?: string;
            /** @description Related object of the consumable */
            consumableRelatedObject?: string;
            /** @description Responsible person for the consumable */
            consumableResponsiblePerson?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/consumable/{id}": {
    /** Get a consumable by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the consumable */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a consumable by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the consumable */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description ID of the consumable type */
            consumableType: number;
            /** @description Name of the consumable */
            consumableName: string;
            /** @description Description of the consumable */
            consumableDescription?: string;
            /**
             * Format: binary
             * @description Photo of the consumable
             */
            consumablePhoto?: string;
            /** @description Quantity of the consumable */
            consumableQuantity?: string;
            /** @description Quantity unit of the consumable */
            consumableQuantityUnit?: string;
            /** @description Related object of the consumable */
            consumableRelatedObject?: string;
            /** @description Responsible person for the consumable */
            consumableResponsiblePerson?: string;
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a consumable by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the consumable */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/contracts": {
    /** Get all contracts */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new contract */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Type of the contract */
            contractContractType: string;
            /** @description Number of the contract */
            contractNumber: string;
            /**
             * Format: date
             * @description Start date of the contract (YYYY-MM-DD)
             */
            contractStartDate: string;
            /**
             * Format: date
             * @description End date of the contract (YYYY-MM-DD)
             */
            contractEndDate?: string;
            /** @description Indicates if the contract has an electronic signature */
            contractEsignature?: boolean;
            /** @description Indicates if the contract is electronically documented */
            contractEdo?: boolean;
            /** @description ID of the tenant associated with the contract */
            tenant: number;
            /** @description IDs of goods associated with the contract */
            goods?: number[];
            /** @description IDs of related objects associated with the contract */
            relatedObjects?: number[];
            /**
             * Format: binary
             * @description Contract file (PDF, Word, etc.)
             */
            contractFile?: string;
            /**
             * Format: binary
             * @description Photo of the contract
             */
            contractPhotoPp?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/contracts/{id}": {
    /** Get a contract by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the contract */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a contract by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the contract */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Type of the contract */
            contractContractType: string;
            /** @description Number of the contract */
            contractNumber: string;
            /**
             * Format: date
             * @description Start date of the contract (YYYY-MM-DD)
             */
            contractStartDate: string;
            /**
             * Format: date
             * @description End date of the contract (YYYY-MM-DD)
             */
            contractEndDate?: string;
            /** @description Indicates if the contract has an electronic signature */
            contractEsignature?: boolean;
            /** @description Indicates if the contract is electronically documented */
            contractEdo?: boolean;
            /** @description ID of the tenant associated with the contract */
            tenant: number;
            /** @description IDs of goods associated with the contract */
            goods?: number[];
            /** @description IDs of related objects associated with the contract */
            relatedObjects?: number[];
            /**
             * Format: binary
             * @description Contract file (PDF, Word, etc.)
             */
            contractFile?: string;
            /**
             * Format: binary
             * @description Photo of the contract
             */
            contractPhotoPp?: string;
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a contract by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the contract */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a contract by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the contract */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Type of the contract */
            contractContractType: string;
            /** @description Number of the contract */
            contractNumber: string;
            /**
             * Format: date
             * @description Start date of the contract (YYYY-MM-DD)
             */
            contractStartDate: string;
            /**
             * Format: date
             * @description End date of the contract (YYYY-MM-DD)
             */
            contractEndDate?: string;
            /** @description Indicates if the contract has an electronic signature */
            contractEsignature?: boolean;
            /** @description Indicates if the contract is electronically documented */
            contractEdo?: boolean;
            /** @description ID of the tenant associated with the contract */
            tenant: number;
            /** @description IDs of goods associated with the contract */
            goods?: number[];
            /** @description IDs of related objects associated with the contract */
            relatedObjects?: number[];
            /**
             * Format: binary
             * @description Contract file (PDF, Word, etc.)
             */
            contractFile?: string;
            /**
             * Format: binary
             * @description Photo of the contract
             */
            contractPhotoPp?: string;
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/contracts/{contract_id}/payments/{payment_id}/": {
    /** Delete a payment by ID under a contract */
    delete: {
      parameters: {
        path: {
          /** @description ID of the contract */
          contract_id: number;
          /** @description ID of the payment */
          payment_id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/contracts/{id}/payments": {
    /** Get all payments under a contract */
    get: {
      parameters: {
        path: {
          /** @description ID of the contract */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new payment under a contract */
    post: {
      parameters: {
        path: {
          /** @description ID of the contract */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Frequency of the payment */
            paymentFrequency: string;
            /** @description Method of the payment */
            paymentMethod: string;
            /** @description Type of the payment */
            paymentType: string;
            /** @description Rent cost of the payment */
            paymentRentCost: string;
            /** @description Rent rate of the payment */
            paymentRentRate: string;
            /** @description Compensation of the payment */
            paymentCompensation?: string;
            /** @description Security deposit of the payment */
            paymentSecurityDeposit?: string;
            /**
             * Format: date
             * @description Payment duration of the payment (YYYY-MM-DD)
             */
            paymentPaymentDuration: string;
            /** @description Indicates if the payment is paid */
            paymentIsPaid?: boolean;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/goods": {
    /** Get all goods */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new good */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Name of the good */
            goodsName: string;
            /** @description Inventory number of the good */
            goodsInventoryNumber?: string;
            /** @description Description of the good */
            goodsDescription?: string;
            /**
             * Format: binary
             * @description Photo of the good
             */
            goodsPhoto?: string;
            /** @description Condition description of the good */
            goodsConditionDescription?: string;
            /** @description Damage date and time of the good */
            goodsDamageDateTime?: string;
            /** @description Related object of the good */
            goodsRelatedObject?: string;
            /** @description Responsible person for the good */
            goodsResponsiblePerson?: string;
            /** @description Status of the good */
            goodsStatus?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/goods/{id}": {
    /** Get a good by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the good */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a good by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the good */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Name of the good */
            goodsName: string;
            /** @description Inventory number of the good */
            goodsInventoryNumber?: string;
            /** @description Description of the good */
            goodsDescription?: string;
            /**
             * Format: binary
             * @description Photo of the good
             */
            goodsPhoto?: string;
            /** @description Condition description of the good */
            goodsConditionDescription?: string;
            /** @description Damage date and time of the good */
            goodsDamageDateTime?: string;
            /** @description Related object of the good */
            goodsRelatedObject?: string;
            /** @description Responsible person for the good */
            goodsResponsiblePerson?: string;
            /** @description Status of the good */
            goodsStatus?: string;
          };
        };
      };
      responses: {
        200: components["responses"]["SingleGoodsResponse"];
        401: components["responses"]["Unauthorized"];
        422: components["responses"]["GenericError"];
      };
    };
    /** Delete a good by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the good */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/goods-types": {
    /** Get all goods types */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new goods type */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Name of the goods type */
            goodsTypeName: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/goods-types/{id}": {
    /** Get a goods type by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the goods type */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a goods type by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the goods type */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/tenants/{id}": {
    /** Get a tenant by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the tenant */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a tenant by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the tenant */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Type of the tenant */
            tenantType: string;
            /** @description Type of organization (if applicable) */
            organizationType?: string;
            /** @description Trade name of the tenant */
            tradeName: string;
            /** @description Name of the tenant (for individuals) */
            tenantName?: string;
            /** @description Surname of the tenant (for individuals) */
            tenantSurname?: string;
            /** @description Patronymic of the tenant (for individuals) */
            tenantPatronymic?: string;
            /** @description Passport series of the tenant (for individuals) */
            tenantPassportSeries?: string;
            /** @description Passport number of the tenant (for individuals) */
            tenantPassportNumber?: string;
            /** @description Issuing authority of the tenant's passport (for individuals) */
            tenantPassportIssuedBy?: string;
            /**
             * Format: date
             * @description Issuing date of the tenant's passport (for individuals) (YYYY-MM-DD)
             */
            tenantPassportIssuedDate?: string;
            /** @description Registration info of the tenant (for individuals) */
            tenantRegistration?: string;
            /** @description Company name of the tenant (for organizations) */
            tenantCompanyName?: string;
            /** @description INN of the tenant (for organizations) */
            tenantInn?: string;
            /** @description KPP of the tenant (for organizations) */
            KPP?: string;
            /** @description OGRN of the tenant (for organizations) */
            tenantOgrn?: string;
            /** @description Bank details of the tenant (for organizations) */
            bankDetails?: string;
            /** @description Additional information about the tenant */
            additionalInfo?: string;
          };
        };
      };
      responses: {
        200: components["responses"]["SingleTenantResponse"];
        401: components["responses"]["Unauthorized"];
        422: components["responses"]["GenericError"];
      };
    };
    /** Delete a tenant by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the tenant */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/tenants/{id}/contacts": {
    /** Get all contacts for a tenant */
    get: {
      parameters: {
        path: {
          /** @description ID of the tenant */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new contact for a tenant */
    post: {
      parameters: {
        path: {
          /** @description ID of the tenant */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Type of the contact */
            contactTypeTenant: string;
            /** @description Attitude contact type */
            attitudeContactTypeTenant?: string;
            /** @description Value of the contact */
            valueTenant: string;
            /** @description First name of the contact */
            firstNameTenant?: string;
            /** @description Last name of the contact */
            lastNameTenant?: string;
            /** @description Organization of the contact */
            organizationTenant?: string;
            /** @description Job title of the contact */
            jobTitleTenant?: string;
            /** @description Address of the contact */
            addressTenant?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/tenants/{tenant_id}/contacts/{contact_id}": {
    /** Delete a contact for a tenant by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the tenant */
          tenant_id: number;
          /** @description ID of the contact */
          contact_id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/teams": {
    /** Get all teams */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new team */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Last name of the team member */
            teamLastName: string;
            /** @description First name of the team member */
            teamFirstName: string;
            /** @description Middle name of the team member */
            teamMiddleName?: string;
            /**
             * Format: date
             * @description Birth date of the team member
             */
            teamBirthDate?: string;
            /** @description Position of the team member */
            teamPosition: string;
            /** @description Work start time of the team member */
            teamWorkStartTime: string;
            /** @description Work end time of the team member */
            teamWorkEndTime?: string;
            /** @description Mobile number of the team member */
            teamMobile?: string;
            /** @description Work phone number of the team member */
            teamWorkPhone?: string;
            /** @description Internal number of the team member */
            teamInternalNumber?: string;
            /** @description Email address of the team member */
            teamEmail?: string;
            /** @description Personal email address of the team member */
            teamPersonalEmail?: string;
            /** @description Website URL of the team member */
            teamWebsite?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/teams/{id}": {
    /** Get a team by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the team */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a team by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the team */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a team by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the team */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a team by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the team */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/work-team-zones": {
    /** Get all work team zones */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new work team zone */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description ID of the related object */
            object_related: number;
            /** @description List of team IDs related to the zone */
            team_related: number[];
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/work-team-zones/{id}": {
    /** Get a work team zone by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the work team zone */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a work team zone by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the work team zone */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a work team zone by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the work team zone */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
  };
  "/properties-building": {
    /** Get all building properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new building property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Building number */
            nombeBuilding: string;
            /** @description Building name */
            buildingName: string;
            /** @description Year the building was built */
            yearBuilt: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-building/{id}": {
    /** Get a building property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the building property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a building property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the building property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a building property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the building property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a building property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the building property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-cluster": {
    /** Get all cluster properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new cluster property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Region of the cluster */
            clusterRegion: string;
            /** @description City of the cluster */
            clusterCity: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-cluster/{id}": {
    /** Get a cluster property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the cluster property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a cluster property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the cluster property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a cluster property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the cluster property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a cluster property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the cluster property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-entrance": {
    /** Get all entrance properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new entrance property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Number of the entrance */
            entranceNumber: number;
            /**
             * Format: binary
             * @description Plan image of the entrance
             */
            entrancePlanImage: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-entrance/{id}": {
    /** Get an entrance property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the entrance property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update an entrance property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the entrance property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete an entrance property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the entrance property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update an entrance property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the entrance property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-floor": {
    /** Get all floor properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new floor property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Number of the floor */
            floorNumber: number;
            /**
             * Format: binary
             * @description Plan image of the floor
             */
            floorPlanImage: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-floor/{id}": {
    /** Get a floor property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the floor property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a floor property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the floor property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a floor property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the floor property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a floor property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the floor property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-object": {
    /** Get all object properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new object property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Address of the object */
            objectAddress: string;
            /** @description Cadastre number of the object */
            cadastreNumber: string;
            /** @description Type of the building */
            buildingType: string;
            /** @description Purpose of the premises */
            purposePremises: string;
            /** @description Technical features of the object */
            technicalFeatures: string;
            /**
             * Format: binary
             * @description Files associated with the object
             */
            objectFiles?: string;
            /**
             * Format: binary
             * @description Images associated with the object
             */
            objectImages?: string;
            /**
             * Format: binary
             * @description Videos associated with the object
             */
            objectVideos?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-object/{id}": {
    /** Get an object property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the object property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update an object property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the object property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete an object property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the object property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update an object property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the object property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-objecttypenew": {
    /** Get all new object type properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new new object type property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Type of the object */
            objectType: string;
            /** @description Name of the object type */
            nameObjectType: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-objecttypenew/{id}": {
    /** Get a new object type property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the new object type property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a new object type property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the new object type property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a new object type property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the new object type property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a new object type property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the new object type property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-purposepremises": {
    /** Get all purpose premises properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new purpose premises property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Name of the purpose premises */
            namePurposePremises: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-purposepremises/{id}": {
    /** Get a purpose premises property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the purpose premises property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a purpose premises property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the purpose premises property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a purpose premises property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the purpose premises property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a purpose premises property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the purpose premises property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-room": {
    /** Get all room properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new room property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description Room number */
            roomNumber: string;
            /**
             * Format: binary
             * @description Plan number file
             */
            planNumber: string;
            /** @description Name of the entrance */
            entrance: string;
            /** @description Area name */
            area: string;
            /**
             * Format: binary
             * @description Room plan file
             */
            roomPlan: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-room/{id}": {
    /** Get a room property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the room property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a room property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the room property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a room property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the room property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a room property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the room property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
  "/properties-territory": {
    /** Get all territory properties */
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Create a new territory property */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** @description District of the territory */
            territoryDistrict: string;
            /** @description Microdistrict of the territory */
            territoryMicrodistrict: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
      };
    };
  };
  "/properties-territory/{id}": {
    /** Get a territory property by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the territory property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Update a territory property by ID */
    put: {
      parameters: {
        path: {
          /** @description ID of the territory property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
    /** Delete a territory property by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the territory property */
          id: number;
        };
      };
      responses: {
        /** @description No content */
        204: {
          content: never;
        };
      };
    };
    /** Partially update a territory property by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the territory property */
          id: number;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LoginUser: {
      email: string;
      /** Format: password */
      password: string;
    };
    NewUser: {
      username: string;
      email: string;
      /** Format: password */
      password: string;
    };
    User: {
      email: string;
      token: string;
      username: string;
      bio: string;
      image: string;
    };
    UpdateUser: {
      email?: string;
      password?: string;
      username?: string;
      bio?: string;
      image?: string;
    };
    Profile: {
      username: string;
      bio: string;
      image: string;
      following: boolean;
    };
    Article: {
      slug: string;
      title: string;
      description: string;
      body: string;
      tagList: string[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      favorited: boolean;
      favoritesCount: number;
      author: components["schemas"]["Profile"];
    };
    NewArticle: {
      title: string;
      description: string;
      body: string;
      tagList?: string[];
    };
    UpdateArticle: {
      title?: string;
      description?: string;
      body?: string;
    };
    Todo: {
      id: number;
      title: string;
      description: string;
      body: string;
      is_complete: boolean;
      status: string;
      priority: string;
      is_deleted: boolean;
      is_active: boolean;
      tagList: string[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      startTimedAt: string;
      /** Format: date-time */
      endTimedAt: string;
      favorited: boolean;
      favoritesCount: number;
      supplierd: boolean;
      suppliersCount: number;
      supporterd: boolean;
      supportersCount: number;
      observerd: boolean;
      observersCount: number;
      substacles: string[];
      author: components["schemas"]["Profile"];
    };
    NewTodo: {
      title: string;
      description: string;
      body: string;
      /**
       * @description Статус
       * @enum {string}
       */
      status: "New" | "Deleted" | "Waiting" | "Done";
      /**
       * @description Приоритет
       * @enum {string}
       */
      priority: "Low" | "Medium" | "High";
      /** Format: date-time */
      startTimedAt: string;
      /** Format: date-time */
      endTimedAt: string;
    };
    UpdateTodo: {
      title?: string;
      description?: string;
      body?: string;
      /**
       * @description Статус
       * @enum {string}
       */
      status?: "New" | "Deleted" | "Waiting" | "Done";
      /**
       * @description Приоритет
       * @enum {string}
       */
      priority?: "Low" | "Medium" | "High";
      /** Format: date-time */
      startTimedAt?: string;
      /** Format: date-time */
      endTimedAt?: string;
    };
    Comment: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      body: string;
      author: components["schemas"]["Profile"];
    };
    NewComment: {
      body: string;
    };
    Tenant: {
      id: number;
      /** @description Type of the tenant */
      tenantType: string;
      /** @description Type of organization (if applicable) */
      organizationType?: string;
      /** @description Trade name of the tenant */
      tradeName: string;
      /** @description Name of the tenant (for individuals) */
      tenantName?: string;
      /** @description Surname of the tenant (for individuals) */
      tenantSurname?: string;
      /** @description Patronymic of the tenant (for individuals) */
      tenantPatronymic?: string;
      /** @description Passport series of the tenant (for individuals) */
      tenantPassportSeries?: string;
      /** @description Passport number of the tenant (for individuals) */
      tenantPassportNumber?: string;
      /** @description Issuing authority of the tenant's passport (for individuals) */
      tenantPassportIssuedBy?: string;
      /**
       * Format: date
       * @description Issuing date of the tenant's passport (for individuals) (YYYY-MM-DD)
       */
      tenantPassportIssuedDate?: string;
      /** @description Registration info of the tenant (for individuals) */
      tenantRegistration?: string;
      /** @description Company name of the tenant (for organizations) */
      tenantCompanyName?: string;
      /** @description INN of the tenant (for organizations) */
      tenantInn?: string;
      /** @description KPP of the tenant (for organizations) */
      KPP?: string;
      /** @description OGRN of the tenant (for organizations) */
      tenantOgrn?: string;
      /** @description Bank details of the tenant (for organizations) */
      bankDetails?: string;
      /** @description Additional information about the tenant */
      additionalInfo?: string;
    };
    Contact: {
      id: number;
      /** @description Type of the contact */
      contactTypeTenant: string;
      /** @description Attitude contact type */
      attitudeContactTypeTenant?: string;
      /** @description Value of the contact */
      valueTenant: string;
      /** @description First name of the contact */
      firstNameTenant?: string;
      /** @description Last name of the contact */
      lastNameTenant?: string;
      /** @description Organization of the contact */
      organizationTenant?: string;
      /** @description Job title of the contact */
      jobTitleTenant?: string;
      /** @description Address of the contact */
      addressTenant?: string;
    };
    GenericErrorModel: {
      errors: {
        body: string[];
      };
    };
    Territory: {
      id: number;
      /** @description District of the territory */
      territoryDistrict: string;
      /** @description Microdistrict of the territory */
      territoryMicrodistrict: string;
    };
    Room: {
      id: number;
      /** @description Room number */
      roomNumber: string;
      /**
       * Format: binary
       * @description Plan number file
       */
      planNumber: string;
      /** @description Name of the entrance */
      entrance: string;
      /** @description Area name */
      area: string;
      /**
       * Format: binary
       * @description Room plan file
       */
      roomPlan: string;
    };
    ObjectTypeNew: {
      id: number;
      /** @description Type of the object */
      objectType: string;
      /** @description Name of the object type */
      nameObjectType: string;
    };
    PurposePremises: {
      id: number;
      /** @description Name of the purpose premises */
      namePurposePremises: string;
    };
    ObjectProperty: {
      id: number;
      /** @description Address of the object */
      objectAddress: string;
      /** @description Cadastre number of the object */
      cadastreNumber: string;
      /** @description Type of the building */
      buildingType: string;
      /** @description Purpose of the premises */
      purposePremises: string;
      /** @description Technical features of the object */
      technicalFeatures: string;
      /**
       * Format: binary
       * @description Files associated with the object
       */
      objectFiles?: string;
      /**
       * Format: binary
       * @description Images associated with the object
       */
      objectImages?: string;
      /**
       * Format: binary
       * @description Videos associated with the object
       */
      objectVideos?: string;
    };
    FloorProperty: {
      id: number;
      /** @description Number of the floor */
      floorNumber: number;
      /**
       * Format: binary
       * @description Plan image of the floor
       */
      floorPlanImage: string;
    };
    EntranceProperty: {
      id: number;
      /** @description Number of the entrance */
      entranceNumber: number;
      /**
       * Format: binary
       * @description Plan image of the entrance
       */
      entrancePlanImage: string;
    };
    BuildingProperty: {
      id: number;
      /** @description Building number */
      nombeBuilding: string;
      /** @description Building name */
      buildingName: string;
      /** @description Year the building was built */
      yearBuilt: string;
    };
    ClusterProperty: {
      id: number;
      /** @description Region of the cluster */
      clusterRegion: string;
      /** @description City of the cluster */
      clusterCity: string;
    };
    Team: {
      id: number;
      /** @description Last name of the team member */
      teamLastName: string;
      /** @description First name of the team member */
      teamFirstName: string;
      /** @description Middle name of the team member */
      teamMiddleName?: string;
      /**
       * Format: date
       * @description Birth date of the team member
       */
      teamBirthDate?: string;
      /** @description Position of the team member */
      teamPosition: string;
      /** @description Work start time of the team member */
      teamWorkStartTime: string;
      /** @description Work end time of the team member */
      teamWorkEndTime?: string;
      /** @description Mobile number of the team member */
      teamMobile?: string;
      /** @description Work phone number of the team member */
      teamWorkPhone?: string;
      /** @description Internal number of the team member */
      teamInternalNumber?: string;
      /** @description Email address of the team member */
      teamEmail?: string;
      /** @description Personal email address of the team member */
      teamPersonalEmail?: string;
      /** @description Website URL of the team member */
      teamWebsite?: string;
    };
    WorkTeamZone: {
      id: number;
      /** @description ID of the related object */
      object_related: number;
      /** @description List of team IDs related to the zone */
      team_related: number[];
    };
    Good: {
      id: number;
      /** @description Name of the good */
      goodsName: string;
      /** @description Inventory number of the good */
      goodsInventoryNumber?: string;
      /** @description Description of the good */
      goodsDescription?: string;
      /** @description Photo of the good (base64 encoded) */
      goodsPhoto?: string;
      /** @description Condition description of the good */
      goodsConditionDescription?: string;
      /** @description Damage date and time of the good */
      goodsDamageDateTime?: string;
      /** @description Related object of the good */
      goodsRelatedObject?: string;
      /** @description Responsible person for the good */
      goodsResponsiblePerson?: string;
      /** @description Status of the good */
      goodsStatus?: string;
    };
    GoodsType: {
      id: number;
      /** @description Name of the goods type */
      goodsTypeName: string;
    };
    Contract: {
      id: number;
      /** @description Type of the contract */
      contractContractType: string;
      /** @description Number of the contract */
      contractNumber: string;
      /**
       * Format: date
       * @description Start date of the contract (YYYY-MM-DD)
       */
      contractStartDate: string;
      /**
       * Format: date
       * @description End date of the contract (YYYY-MM-DD)
       */
      contractEndDate?: string;
      /** @description Indicates if the contract has an electronic signature */
      contractEsignature?: boolean;
      /** @description Indicates if the contract is electronically documented */
      contractEdo?: boolean;
      /** @description ID of the tenant associated with the contract */
      tenant: number;
      /** @description IDs of goods associated with the contract */
      goods?: number[];
      /** @description IDs of related objects associated with the contract */
      relatedObjects?: number[];
      /** @description Contract file (PDF, Word, etc.) */
      contractFile?: string;
      /** @description Photo of the contract */
      contractPhotoPp?: string;
    };
    Payment: {
      id: number;
      /** @description Frequency of the payment */
      paymentFrequency: string;
      /** @description Method of the payment */
      paymentMethod: string;
      /** @description Type of the payment */
      paymentType: string;
      /** @description Rent cost of the payment */
      paymentRentCost: string;
      /** @description Rent rate of the payment */
      paymentRentRate: string;
      /** @description Compensation of the payment */
      paymentCompensation?: string;
      /** @description Security deposit of the payment */
      paymentSecurityDeposit?: string;
      /**
       * Format: date
       * @description Payment duration of the payment (YYYY-MM-DD)
       */
      paymentPaymentDuration: string;
      /** @description Indicates if the payment is paid */
      paymentIsPaid?: boolean;
    };
    Consumable: {
      id: number;
      /** @description ID of the consumable type */
      consumableType: number;
      /** @description Name of the consumable */
      consumableName: string;
      /** @description Description of the consumable */
      consumableDescription?: string;
      /** @description Photo of the consumable */
      consumablePhoto?: string;
      /** @description Quantity of the consumable */
      consumableQuantity?: string;
      /** @description Quantity unit of the consumable */
      consumableQuantityUnit?: string;
      /** @description Related object of the consumable */
      consumableRelatedObject?: string;
      /** @description Responsible person for the consumable */
      consumableResponsiblePerson?: string;
    };
  };
  responses: {
    /** @description Tags */
    TagsResponse: {
      content: {
        "application/json": {
          tags: string[];
        };
      };
    };
    /** @description Single comment */
    SingleCommentResponse: {
      content: {
        "application/json": {
          comment: components["schemas"]["Comment"];
        };
      };
    };
    /** @description Multiple comments */
    MultipleCommentsResponse: {
      content: {
        "application/json": {
          comments: components["schemas"]["Comment"][];
        };
      };
    };
    /** @description Single article */
    SingleArticleResponse: {
      content: {
        "application/json": {
          article: components["schemas"]["Article"];
        };
      };
    };
    /** @description Multiple articles */
    MultipleArticlesResponse: {
      content: {
        "application/json": {
          articles: components["schemas"]["Article"][];
          articlesCount: number;
        };
      };
    };
    /** @description Profile */
    ProfileResponse: {
      content: {
        "application/json": {
          profile: components["schemas"]["Profile"];
        };
      };
    };
    /** @description User */
    UserResponse: {
      content: {
        "application/json": {
          user: components["schemas"]["User"];
        };
      };
    };
    /** @description No content */
    EmptyOkResponse: {
      content: {
      };
    };
    /** @description Unauthorized */
    Unauthorized: {
      content: {
      };
    };
    /** @description Unexpected error */
    GenericError: {
      content: {
        "application/json": components["schemas"]["GenericErrorModel"];
      };
    };
    /** @description Response containing a single todo */
    SingleTodoResponse: {
      content: {
        "application/json": components["schemas"]["Todo"];
      };
    };
    /** @description Response containing a list of todos */
    MultipleTodosResponse: {
      content: {
        "application/json": components["schemas"]["Todo"][];
      };
    };
    /** @description Response containing a single consumable */
    SingleConsumableResponse: {
      content: {
        "application/json": components["schemas"]["Consumable"];
      };
    };
    /** @description Response containing a list of consumables */
    MultipleConsumablesResponse: {
      content: {
        "application/json": components["schemas"]["Consumable"][];
      };
    };
  };
  parameters: {
    /** @description The number of items to skip before starting to collect the result set. */
    offsetParam?: number;
    /** @description The numbers of items to return. */
    limitParam?: number;
  };
  requestBodies: {
    NewTodoRequest: {
      content: {
        "application/json": {
          /** @description Title of the todo */
          title: string;
          /** @description Description of the todo */
          description: string;
          /**
           * Format: date
           * @description Due date of the todo
           */
          dueDate?: string;
        };
      };
    };
    UpdateTodoRequest: {
      content: {
        "application/json": {
          /** @description Updated title of the todo */
          title: string;
          /** @description Updated description of the todo */
          description: string;
          /**
           * Format: date
           * @description Updated due date of the todo
           */
          dueDate?: string;
        };
      };
    };
    /** @description Credentials to use */
    LoginUserRequest: {
      content: {
        "application/json": {
          user: components["schemas"]["LoginUser"];
        };
      };
    };
    /** @description Details of the new user to register */
    NewUserRequest: {
      content: {
        "application/json": {
          user: components["schemas"]["NewUser"];
        };
      };
    };
    /** @description User details to update. At least **one** field is required. */
    UpdateUserRequest: {
      content: {
        "application/json": {
          user: components["schemas"]["UpdateUser"];
        };
      };
    };
    /** @description Article to create */
    NewArticleRequest: {
      content: {
        "application/json": {
          article: components["schemas"]["NewArticle"];
        };
      };
    };
    /** @description Article to update */
    UpdateArticleRequest: {
      content: {
        "application/json": {
          article: components["schemas"]["UpdateArticle"];
        };
      };
    };
    /** @description Comment you want to create */
    NewCommentRequest: {
      content: {
        "application/json": {
          comment: components["schemas"]["NewComment"];
        };
      };
    };
    ConsumableCreateRequest?: {
      content: {
        "application/json": {
          /** @description ID of the consumable type */
          consumableType: number;
          /** @description Name of the consumable */
          consumableName: string;
          /** @description Description of the consumable */
          consumableDescription?: string;
          /**
           * Format: binary
           * @description Photo of the consumable
           */
          consumablePhoto?: string;
          /** @description Quantity of the consumable */
          consumableQuantity?: string;
          /** @description Quantity unit of the consumable */
          consumableQuantityUnit?: string;
          /** @description Related object of the consumable */
          consumableRelatedObject?: string;
          /** @description Responsible person for the consumable */
          consumableResponsiblePerson?: string;
        };
      };
    };
    ConsumableUpdateRequest?: {
      content: {
        "application/json": {
          /** @description ID of the consumable type */
          consumableType: number;
          /** @description Name of the consumable */
          consumableName: string;
          /** @description Description of the consumable */
          consumableDescription?: string;
          /**
           * Format: binary
           * @description Photo of the consumable
           */
          consumablePhoto?: string;
          /** @description Quantity of the consumable */
          consumableQuantity?: string;
          /** @description Quantity unit of the consumable */
          consumableQuantityUnit?: string;
          /** @description Related object of the consumable */
          consumableRelatedObject?: string;
          /** @description Responsible person for the consumable */
          consumableResponsiblePerson?: string;
        };
      };
    };
    CreateContractRequest?: {
      content: {
        "application/json": {
          /** @description Type of the contract */
          contractContractType: string;
          /** @description Number of the contract */
          contractNumber: string;
          /**
           * Format: date
           * @description Start date of the contract (YYYY-MM-DD)
           */
          contractStartDate: string;
          /**
           * Format: date
           * @description End date of the contract (YYYY-MM-DD)
           */
          contractEndDate?: string;
          /** @description Indicates if the contract has an electronic signature */
          contractEsignature?: boolean;
          /** @description Indicates if the contract is electronically documented */
          contractEdo?: boolean;
          /** @description ID of the tenant associated with the contract */
          tenant: number;
          /** @description IDs of goods associated with the contract */
          goods?: number[];
          /** @description IDs of related objects associated with the contract */
          relatedObjects?: number[];
          /**
           * Format: binary
           * @description Contract file (PDF, Word, etc.)
           */
          contractFile?: string;
          /**
           * Format: binary
           * @description Photo of the contract
           */
          contractPhotoPp?: string;
        };
      };
    };
    UpdateContractRequest?: {
      content: {
        "application/json": {
          /** @description Type of the contract */
          contractContractType: string;
          /** @description Number of the contract */
          contractNumber: string;
          /**
           * Format: date
           * @description Start date of the contract (YYYY-MM-DD)
           */
          contractStartDate: string;
          /**
           * Format: date
           * @description End date of the contract (YYYY-MM-DD)
           */
          contractEndDate?: string;
          /** @description Indicates if the contract has an electronic signature */
          contractEsignature?: boolean;
          /** @description Indicates if the contract is electronically documented */
          contractEdo?: boolean;
          /** @description ID of the tenant associated with the contract */
          tenant: number;
          /** @description IDs of goods associated with the contract */
          goods?: number[];
          /** @description IDs of related objects associated with the contract */
          relatedObjects?: number[];
          /**
           * Format: binary
           * @description Contract file (PDF, Word, etc.)
           */
          contractFile?: string;
          /**
           * Format: binary
           * @description Photo of the contract
           */
          contractPhotoPp?: string;
        };
      };
    };
    CreateGoodRequest?: {
      content: {
        "application/json": {
          /** @description Name of the good */
          goodsName: string;
          /** @description Inventory number of the good */
          goodsInventoryNumber?: string;
          /** @description Description of the good */
          goodsDescription?: string;
          /**
           * Format: binary
           * @description Photo of the good
           */
          goodsPhoto?: string;
          /** @description Condition description of the good */
          goodsConditionDescription?: string;
          /** @description Damage date and time of the good */
          goodsDamageDateTime?: string;
          /** @description Related object of the good */
          goodsRelatedObject?: string;
          /** @description Responsible person for the good */
          goodsResponsiblePerson?: string;
          /** @description Status of the good */
          goodsStatus?: string;
        };
      };
    };
    UpdateGoodRequest?: {
      content: {
        "application/json": {
          /** @description Name of the good */
          goodsName: string;
          /** @description Inventory number of the good */
          goodsInventoryNumber?: string;
          /** @description Description of the good */
          goodsDescription?: string;
          /**
           * Format: binary
           * @description Photo of the good
           */
          goodsPhoto?: string;
          /** @description Condition description of the good */
          goodsConditionDescription?: string;
          /** @description Damage date and time of the good */
          goodsDamageDateTime?: string;
          /** @description Related object of the good */
          goodsRelatedObject?: string;
          /** @description Responsible person for the good */
          goodsResponsiblePerson?: string;
          /** @description Status of the good */
          goodsStatus?: string;
        };
      };
    };
    CreateGoodsTypeRequest?: {
      content: {
        "application/json": {
          /** @description Name of the goods type */
          goodsTypeName: string;
        };
      };
    };
    CreateTenantRequest?: {
      content: {
        "application/json": {
          /** @description Type of the tenant */
          tenantType: string;
          /** @description Type of organization (if applicable) */
          organizationType?: string;
          /** @description Trade name of the tenant */
          tradeName: string;
          /** @description Name of the tenant (for individuals) */
          tenantName?: string;
          /** @description Surname of the tenant (for individuals) */
          tenantSurname?: string;
          /** @description Patronymic of the tenant (for individuals) */
          tenantPatronymic?: string;
          /** @description Passport series of the tenant (for individuals) */
          tenantPassportSeries?: string;
          /** @description Passport number of the tenant (for individuals) */
          tenantPassportNumber?: string;
          /** @description Issuing authority of the tenant's passport (for individuals) */
          tenantPassportIssuedBy?: string;
          /**
           * Format: date
           * @description Issuing date of the tenant's passport (for individuals) (YYYY-MM-DD)
           */
          tenantPassportIssuedDate?: string;
          /** @description Registration info of the tenant (for individuals) */
          tenantRegistration?: string;
          /** @description Company name of the tenant (for organizations) */
          tenantCompanyName?: string;
          /** @description INN of the tenant (for organizations) */
          tenantInn?: string;
          /** @description KPP of the tenant (for organizations) */
          KPP?: string;
          /** @description OGRN of the tenant (for organizations) */
          tenantOgrn?: string;
          /** @description Bank details of the tenant (for organizations) */
          bankDetails?: string;
          /** @description Additional information about the tenant */
          additionalInfo?: string;
        };
      };
    };
    UpdateTenantRequest?: {
      content: {
        "application/json": {
          /** @description Type of the tenant */
          tenantType: string;
          /** @description Type of organization (if applicable) */
          organizationType?: string;
          /** @description Trade name of the tenant */
          tradeName: string;
          /** @description Name of the tenant (for individuals) */
          tenantName?: string;
          /** @description Surname of the tenant (for individuals) */
          tenantSurname?: string;
          /** @description Patronymic of the tenant (for individuals) */
          tenantPatronymic?: string;
          /** @description Passport series of the tenant (for individuals) */
          tenantPassportSeries?: string;
          /** @description Passport number of the tenant (for individuals) */
          tenantPassportNumber?: string;
          /** @description Issuing authority of the tenant's passport (for individuals) */
          tenantPassportIssuedBy?: string;
          /**
           * Format: date
           * @description Issuing date of the tenant's passport (for individuals) (YYYY-MM-DD)
           */
          tenantPassportIssuedDate?: string;
          /** @description Registration info of the tenant (for individuals) */
          tenantRegistration?: string;
          /** @description Company name of the tenant (for organizations) */
          tenantCompanyName?: string;
          /** @description INN of the tenant (for organizations) */
          tenantInn?: string;
          /** @description KPP of the tenant (for organizations) */
          KPP?: string;
          /** @description OGRN of the tenant (for organizations) */
          tenantOgrn?: string;
          /** @description Bank details of the tenant (for organizations) */
          bankDetails?: string;
          /** @description Additional information about the tenant */
          additionalInfo?: string;
        };
      };
    };
    CreateTenantContactRequest?: {
      content: {
        "application/json": {
          /** @description Type of the contact */
          contactTypeTenant: string;
          /** @description Attitude contact type */
          attitudeContactTypeTenant?: string;
          /** @description Value of the contact */
          valueTenant: string;
          /** @description First name of the contact */
          firstNameTenant?: string;
          /** @description Last name of the contact */
          lastNameTenant?: string;
          /** @description Organization of the contact */
          organizationTenant?: string;
          /** @description Job title of the contact */
          jobTitleTenant?: string;
          /** @description Address of the contact */
          addressTenant?: string;
        };
      };
    };
    CreateTeamRequest?: {
      content: {
        "application/json": {
          /** @description Last name of the team member */
          teamLastName: string;
          /** @description First name of the team member */
          teamFirstName: string;
          /** @description Middle name of the team member */
          teamMiddleName?: string;
          /**
           * Format: date
           * @description Birth date of the team member
           */
          teamBirthDate?: string;
          /** @description Position of the team member */
          teamPosition: string;
          /** @description Work start time of the team member */
          teamWorkStartTime: string;
          /** @description Work end time of the team member */
          teamWorkEndTime?: string;
          /** @description Mobile number of the team member */
          teamMobile?: string;
          /** @description Work phone number of the team member */
          teamWorkPhone?: string;
          /** @description Internal number of the team member */
          teamInternalNumber?: string;
          /** @description Email address of the team member */
          teamEmail?: string;
          /** @description Personal email address of the team member */
          teamPersonalEmail?: string;
          /** @description Website URL of the team member */
          teamWebsite?: string;
        };
      };
    };
    CreateWorkTeamZoneRequest?: {
      content: {
        "application/json": {
          /** @description ID of the related object */
          object_related: number;
          /** @description List of team IDs related to the zone */
          team_related: number[];
        };
      };
    };
    CreateBuildingPropertyRequest?: {
      content: {
        "application/json": {
          /** @description Building number */
          nombeBuilding: string;
          /** @description Building name */
          buildingName: string;
          /** @description Year the building was built */
          yearBuilt: string;
        };
      };
    };
    CreateClusterPropertyRequest?: {
      content: {
        "application/json": {
          /** @description Region of the cluster */
          clusterRegion: string;
          /** @description City of the cluster */
          clusterCity: string;
        };
      };
    };
    CreateEntrancePropertyRequest?: {
      content: {
        "application/json": {
          /** @description Number of the entrance */
          entranceNumber: number;
          /**
           * Format: binary
           * @description Plan image of the entrance
           */
          entrancePlanImage: string;
        };
      };
    };
    CreateFloorPropertyRequest?: {
      content: {
        "application/json": {
          /** @description Number of the floor */
          floorNumber: number;
          /**
           * Format: binary
           * @description Plan image of the floor
           */
          floorPlanImage: string;
        };
      };
    };
    CreateObjectPropertyRequest?: {
      content: {
        "application/json": {
          /** @description Address of the object */
          objectAddress: string;
          /** @description Cadastre number of the object */
          cadastreNumber: string;
          /** @description Type of the building */
          buildingType: string;
          /** @description Purpose of the premises */
          purposePremises: string;
          /** @description Technical features of the object */
          technicalFeatures: string;
          /**
           * Format: binary
           * @description Files associated with the object
           */
          objectFiles?: string;
          /**
           * Format: binary
           * @description Images associated with the object
           */
          objectImages?: string;
          /**
           * Format: binary
           * @description Videos associated with the object
           */
          objectVideos?: string;
        };
      };
    };
    CreateObjectTypePropertyRequest?: {
      content: {
        "application/json": {
          /** @description Type of the object */
          objectType: string;
          /** @description Name of the object type */
          nameObjectType: string;
        };
      };
    };
    CreatePurposePremisesPropertyRequest?: {
      content: {
        "application/json": {
          /** @description Name of the purpose premises */
          namePurposePremises: string;
        };
      };
    };
    CreateRoomPropertyRequest?: {
      content: {
        "application/json": {
          /** @description Room number */
          roomNumber: string;
          /**
           * Format: binary
           * @description Plan number file
           */
          planNumber: string;
          /** @description Name of the entrance */
          entrance: string;
          /** @description Area name */
          area: string;
          /**
           * Format: binary
           * @description Room plan file
           */
          roomPlan: string;
        };
      };
    };
    CreateTerritoryPropertyRequest?: {
      content: {
        "application/json": {
          /** @description District of the territory */
          territoryDistrict: string;
          /** @description Microdistrict of the territory */
          territoryMicrodistrict: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Existing user login
   * @description Login for existing user
   */
  Login: {
    requestBody: components["requestBodies"]["LoginUserRequest"];
    responses: {
      200: components["responses"]["UserResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /** @description Register a new user */
  CreateUser: {
    requestBody: components["requestBodies"]["NewUserRequest"];
    responses: {
      201: components["responses"]["UserResponse"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get current user
   * @description Gets the currently logged-in user
   */
  GetCurrentUser: {
    responses: {
      200: components["responses"]["UserResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Update current user
   * @description Updated user information for current user
   */
  UpdateCurrentUser: {
    requestBody: components["requestBodies"]["UpdateUserRequest"];
    responses: {
      200: components["responses"]["UserResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get a profile
   * @description Get a profile of a user of the system. Auth is optional
   */
  GetProfileByUsername: {
    parameters: {
      path: {
        /** @description Username of the profile to get */
        username: string;
      };
    };
    responses: {
      200: components["responses"]["ProfileResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Follow a user
   * @description Follow a user by username
   */
  FollowUserByUsername: {
    parameters: {
      path: {
        /** @description Username of the profile you want to follow */
        username: string;
      };
    };
    responses: {
      200: components["responses"]["ProfileResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Unfollow a user
   * @description Unfollow a user by username
   */
  UnfollowUserByUsername: {
    parameters: {
      path: {
        /** @description Username of the profile you want to unfollow */
        username: string;
      };
    };
    responses: {
      200: components["responses"]["ProfileResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get recent articles from users you follow
   * @description Get most recent articles from users you follow. Use query parameters to limit. Auth is required
   */
  GetArticlesFeed: {
    parameters: {
      query?: {
        offset?: components["parameters"]["offsetParam"];
        limit?: components["parameters"]["limitParam"];
      };
    };
    responses: {
      200: components["responses"]["MultipleArticlesResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get recent articles globally
   * @description Get most recent articles globally. Use query parameters to filter results. Auth is optional
   */
  GetArticles: {
    parameters: {
      query?: {
        /** @description Filter by tag */
        tag?: string;
        /** @description Filter by author (username) */
        author?: string;
        /** @description Filter by favorites of a user (username) */
        favorited?: string;
        offset?: components["parameters"]["offsetParam"];
        limit?: components["parameters"]["limitParam"];
      };
    };
    responses: {
      200: components["responses"]["MultipleArticlesResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Create an article
   * @description Create an article. Auth is required
   */
  CreateArticle: {
    requestBody: components["requestBodies"]["NewArticleRequest"];
    responses: {
      201: components["responses"]["SingleArticleResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get an article
   * @description Get an article. Auth not required
   */
  GetArticle: {
    parameters: {
      path: {
        /** @description Slug of the article to get */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["SingleArticleResponse"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Update an article
   * @description Update an article. Auth is required
   */
  UpdateArticle: {
    parameters: {
      path: {
        /** @description Slug of the article to update */
        slug: string;
      };
    };
    requestBody: components["requestBodies"]["UpdateArticleRequest"];
    responses: {
      200: components["responses"]["SingleArticleResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Delete an article
   * @description Delete an article. Auth is required
   */
  DeleteArticle: {
    parameters: {
      path: {
        /** @description Slug of the article to delete */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["EmptyOkResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get comments for an article
   * @description Get the comments for an article. Auth is optional
   */
  GetArticleComments: {
    parameters: {
      path: {
        /** @description Slug of the article that you want to get comments for */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["MultipleCommentsResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Create a comment for an article
   * @description Create a comment for an article. Auth is required
   */
  CreateArticleComment: {
    parameters: {
      path: {
        /** @description Slug of the article that you want to create a comment for */
        slug: string;
      };
    };
    requestBody: components["requestBodies"]["NewCommentRequest"];
    responses: {
      200: components["responses"]["SingleCommentResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Delete a comment for an article
   * @description Delete a comment for an article. Auth is required
   */
  DeleteArticleComment: {
    parameters: {
      path: {
        /** @description Slug of the article that you want to delete a comment for */
        slug: string;
        /** @description ID of the comment you want to delete */
        id: number;
      };
    };
    responses: {
      200: components["responses"]["EmptyOkResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Favorite an article
   * @description Favorite an article. Auth is required
   */
  CreateArticleFavorite: {
    parameters: {
      path: {
        /** @description Slug of the article that you want to favorite */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["SingleArticleResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Unfavorite an article
   * @description Unfavorite an article. Auth is required
   */
  DeleteArticleFavorite: {
    parameters: {
      path: {
        /** @description Slug of the article that you want to unfavorite */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["SingleArticleResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get tags
   * @description Get tags. Auth not required
   */
  GetTags: {
    responses: {
      200: components["responses"]["TagsResponse"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get recent todos from users you follow
   * @description Get most recent todos from users you follow. Use query parameters to limit. Auth is required
   */
  GetTodosFeed: {
    parameters: {
      query?: {
        offset?: components["parameters"]["offsetParam"];
        limit?: components["parameters"]["limitParam"];
      };
    };
    responses: {
      200: components["responses"]["MultipleTodosResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get recent todos globally
   * @description Get most recent todos globally. Use query parameters to filter results. Auth is optional
   */
  GetTodos: {
    parameters: {
      query?: {
        /** @description Filter by tag */
        tag?: string;
        /** @description Filter by author (username) */
        author?: string;
        /** @description Filter by favorites of a user (username) */
        favorited?: string;
        offset?: components["parameters"]["offsetParam"];
        limit?: components["parameters"]["limitParam"];
      };
    };
    responses: {
      200: components["responses"]["MultipleTodosResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Create an todo
   * @description Create an todo. Auth is required
   */
  CreateTodo: {
    requestBody: components["requestBodies"]["NewTodoRequest"];
    responses: {
      201: components["responses"]["SingleTodoResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get an todo
   * @description Get an todo. Auth not required
   */
  GetTodo: {
    parameters: {
      path: {
        /** @description Slug of the todo to get */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["SingleTodoResponse"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Update an todo
   * @description Update an todo. Auth is required
   */
  UpdateTodo: {
    parameters: {
      path: {
        /** @description Slug of the todo to update */
        slug: string;
      };
    };
    requestBody: components["requestBodies"]["UpdateTodoRequest"];
    responses: {
      200: components["responses"]["SingleTodoResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Delete an todo
   * @description Delete an todo. Auth is required
   */
  DeleteTodo: {
    parameters: {
      path: {
        /** @description Slug of the todo to delete */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["EmptyOkResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Get comments for an todo
   * @description Get the comments for an todo. Auth is optional
   */
  GetTodoComments: {
    parameters: {
      path: {
        /** @description Slug of the todo that you want to get comments for */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["MultipleCommentsResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Create a comment for an todo
   * @description Create a comment for an todo. Auth is required
   */
  CreateTodoComment: {
    parameters: {
      path: {
        /** @description Slug of the todo that you want to create a comment for */
        slug: string;
      };
    };
    requestBody: components["requestBodies"]["NewCommentRequest"];
    responses: {
      200: components["responses"]["SingleCommentResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Delete a comment for an todo
   * @description Delete a comment for an todo. Auth is required
   */
  DeleteTodoComment: {
    parameters: {
      path: {
        /** @description Slug of the todo that you want to delete a comment for */
        slug: string;
        /** @description ID of the comment you want to delete */
        id: number;
      };
    };
    responses: {
      200: components["responses"]["EmptyOkResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Favorite an todo
   * @description Favorite an todo. Auth is required
   */
  CreateTodoFavorite: {
    parameters: {
      path: {
        /** @description Slug of the todo that you want to favorite */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["SingleTodoResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
  /**
   * Unfavorite an todo
   * @description Unfavorite an todo. Auth is required
   */
  DeleteTodoFavorite: {
    parameters: {
      path: {
        /** @description Slug of the todo that you want to unfavorite */
        slug: string;
      };
    };
    responses: {
      200: components["responses"]["SingleTodoResponse"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["GenericError"];
    };
  };
}
